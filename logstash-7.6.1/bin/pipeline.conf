input {
	beats {
		port => "5044"
	}
}

filter{
    # Filter needed entries with the grok filter. Afterwards some field are further processed like removing events that
    # don't include a widget name or changing @timestamp
    if [log][file][path] =~ "\S+session\S+" {
        grok{
            pattern_definitions => {
                "REQUEST" => "(Outgoing response|Incoming request)"
                "REQUEST_TYPE" => "(POST|GET)"
            }
            match => {"message" => [
                '^%{TIMESTAMP_ISO8601:zeit}%{SPACE}%{LOGLEVEL}%{SPACE}\[%{NOTSPACE:sessionid}\]\t\[%{NOTSPACE}\]\t\[%{NOTSPACE:userid}\]\t\[%{NOTSPACE} %{NOTSPACE}\]\t%{REQUEST:request}:%{SPACE}%{REQUEST_TYPE:request_type}%{SPACE}%{URIPATH:url}%{NOTSPACE:widget}%{SPACE}%{GREEDYDATA:useragent}',
                '^%{TIMESTAMP_ISO8601:zeit}%{GREEDYDATA:entry}'
                ]
            }
            remove_field => ['message']
        }

        if [widget] !~ "\S+widget=\S+" {
            drop{ }
        }

         mutate {
            gsub => [ "url", "\S+/rest", ""]
            remove_field => ['host','agent','@version','ecs','version']
        }

        date {
            match => [ "zeit", "ISO8601" ]
            target => "@timestamp"
		}

        kv {
            source => "widget"
            target => "widget"
            field_split_pattern => "&"
            include_keys => "widget"
            value_split => "="
        }

        if [request] == "Outgoing response"{
            drop { }
        }

        if [url] =~ "/fx/\S+" {
            mutate {
                gsub => ["url","/fx/\S+","/fx"]
            }
        }
    
    } else if [log][file][path] =~ "\S+.json" {
    # Execute ruby script to store transformed data in elasticsearch.
        json {
            source => "message"
            target => "parsedJson"
        }

        ruby{
            path => "./script.rb"
            script_params => {
                "parsedJson" => "parsedJson"
                }
        }

        mutate {
            remove_field => ['host','agent','_shards','message','took','hits','parsedJson']
        }
    }
}


output {
    if [log][file][path] =~ "\S+.json" {
        if [user][tags] =~ "vis" {
            # Store transformed data in index for visualizations
            elasticsearch {
                hosts => ["localhost:9200"]
                index => "visualization-entities"
                sniffing => false
            }
        } if [user][tags] =~ "nested" {
            # Store transformed data in index for association rule mining
            elasticsearch {
                hosts => ["localhost:9200"]
                index => "session-entities"
                sniffing => false
            }
        }
    }
    else {
        elasticsearch {
            hosts => ["localhost:9200"]
            index => "generated-logs-%{+YYYY.MM.dd}"
            }
    }
    #stdout { codec => rubydebug }
}
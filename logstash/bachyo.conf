input {
	beats {
		port => "5044"
	}
}

filter{
    if [log][file][path] =~ "\S+session\S+" {
        grok{
            pattern_definitions => {
                "REQUEST" => "(Outgoing response|Incoming request)"
                "REQUEST_TYPE" => "(POST|GET)"
            }
            match => {"message" => [
                '^%{TIMESTAMP_ISO8601:zeit}%{SPACE}%{LOGLEVEL}%{SPACE}\[%{NOTSPACE:sessionid}\]\t\[%{NOTSPACE}\]\t\[%{NOTSPACE:userid}\]\t\[%{NOTSPACE} %{NOTSPACE}\]\t%{REQUEST:request}:%{SPACE}%{REQUEST_TYPE:request_type}%{SPACE}%{URIPATH:url}%{GREEDYDATA:stuff}',
                '^%{TIMESTAMP_ISO8601:zeit}%{GREEDYDATA:entry}'
                ]
            }
            remove_field => ['message']
        }

        if [url] !~ "\S+/rest" {
            drop{ }
        }

         mutate {
            gsub => [ "url", "\S+/rest", ""]
            remove_field => ['host','agent','@version','ecs','version']
        }

        date {
            match => [ "zeit", "ISO8601" ]
            target => "@timestamp"
		}

        if [request] == "Outgoing response"{
            drop { }
        }

        if [url] =~ "/fx/\S+" {
            mutate {
                gsub => ["url","/fx/\S+","/fx"]
            }
        }
    
#        aggregate {
#            task_id => "%{url}"
#            code => "map['counter'] ||=0; map['counter'] +=1;"
#            map_action => "create"
            #end_of_task => true
#        }

    } else if [log][file][path] =~ "\S+.json" {
        json {
            source => "message"
            target => "parsedJson"
        }
        #
#        mutate {
#            add_field => {
#                "user" => "%{[parsedJson][aggregations][userid][buckets][0][key]}"
#            }
#        }
##################################

#
        ruby{
            path => "./script.rb"
            script_params => {
                "parsedJson" => "parsedJson"
                }#
#            code => '
#                $source = event.get("parsedJson")
#                $users = event.get("[parsedJson][aggregations][userid][buckets][0][key]")
#                $usersSize = $users.size
#
#                puts "##############hier ist mein zeug##############"
#                puts $users
#                puts $usersSize.class
#                puts "##############ende############################"
#            '
        }
    
        mutate {
            remove_field => ['host','agent','_shards','message','took','hits','parsedJson']
        }


#        mutate {
#            add_field => {
#                "user.session" => "%{[parsedJson][aggregations][userid][buckets][0][sessionid][buckets][0][key]}"
#            }
#        }


    }

}

output {
    if [log][file][path] =~ "\S+.json" {
        elasticsearch { 
            hosts => ["localhost:9200"]
            index => "session-objects-%{+YYYY.MM.dd}"
        }
    } else {
        elasticsearch { hosts => ["localhost:9200"] }
    }

    stdout { codec => rubydebug }
}